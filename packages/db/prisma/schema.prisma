// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  CUSTOMER
  OPERATOR
  ADMIN
}

enum BookingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ServiceTier {
  BASIC
  PREMIUM
  LUXURY
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

// ========================================
// MODELS
// ========================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  phone     String?
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedBusinesses Business[] @relation("BusinessOwner")
  bookings        Booking[]
  reviews         Review[]

  @@map("users")
}

model Business {
  id        String   @id @default(uuid())
  name      String
  address   String
  lat       Float
  lng       Float
  ownerId   String
  createdAt DateTime @default(now())

  // Relations
  owner    User        @relation("BusinessOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  services Service[]
  bookings Booking[]

  @@map("businesses")
}

model Service {
  id          String      @id @default(uuid())
  businessId  String
  name        String
  description String
  price       Decimal     @db.Decimal(10, 2)
  duration    Int // duration in minutes
  tier        ServiceTier

  // Relations
  business Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("services")
}

model Booking {
  id          String        @id @default(uuid())
  userId      String
  businessId  String
  serviceId   String
  scheduledAt DateTime
  status      BookingStatus
  notes       String?
  photos      String[] // array of image URLs
  paymentId   String?
  createdAt   DateTime      @default(now())

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  service  Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  payment  Payment?
  review   Review?

  @@map("bookings")
}

model Payment {
  id         String        @id @default(uuid())
  bookingId  String        @unique
  amount     Decimal       @db.Decimal(10, 2)
  currency   String        @default("USD")
  status     PaymentStatus
  provider   String // e.g., "stripe", "paypal"
  providerId String? // provider's transaction ID
  paidAt     DateTime?

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  bookingId String   @unique
  rating    Int      @db.SmallInt // 1-5 rating
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
} 